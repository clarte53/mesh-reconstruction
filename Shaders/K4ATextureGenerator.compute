#include "ProceduralRenderingHelpers.cginc"

// One kernel to Generate XYZTexture from kinect data
// One kernel to Generate ColorTexture from kinect data
#pragma kernel VertexGenerator
#pragma kernel ColorGenerator
#pragma enable_d3d11_debug_symbols

int depthWidth;
int depthHeight;
int colorWidth;
int colorHeight;
StructuredBuffer<int> Input_positionData;
//StructuredBuffer<float3> Input_positionData;
StructuredBuffer<uint> Input_colorData;


RWTexture2D<float4> Output_vertexTexture;
RWTexture2D<float4> Output_colorTexture;



[numthreads(64, 16, 1)]
void VertexGenerator(uint3 id : SV_DispatchThreadID)
{
	int index = depthWidth * (depthHeight - id.y) + (depthWidth - id.x);

	int output_x;
	int output_y;
	int output_z;

	int group_base = floor(index / 2);
	if (fmod(index, 2) == 0) {
		int firstInt = Input_positionData[group_base * 3];
		int secondInt = Input_positionData[group_base * 3 + 1];
		int x = (firstInt >> 0) & 0xffff;
		int y = (firstInt >> 16) & 0xffff;
		int z = (secondInt >> 0) & 0xffff;
		output_x = (((x & 0x8000) > 0) ? 0xffff0000 : 0x00000000) + (x & 0xffff);
		output_y = (((y & 0x8000) > 0) ? 0xffff0000 : 0x00000000) + (y & 0xffff);
		output_z = (((z & 0x8000) > 0) ? 0xffff0000 : 0x00000000) + (z & 0xffff);
	}
	else {
		int firstInt = Input_positionData[group_base * 3 + 1];
		int secondInt = Input_positionData[group_base * 3 + 2];
		int x = (firstInt >> 16) & 0xffff;
		int y = (secondInt >> 0) & 0xffff;
		int z = (secondInt >> 16) & 0xffff;
		output_x = (((x & 0x8000) > 0) ? 0xffff0000 : 0x00000000) + (x & 0xffff);
		output_y = (((y & 0x8000) > 0) ? 0xffff0000 : 0x00000000) + (y & 0xffff);
		output_z = (((z & 0x8000) > 0) ? 0xffff0000 : 0x00000000) + (z & 0xffff);
	}
	

	float ox = (float)output_x * 0.001;
	float oy = -(float)output_y * 0.001;
	float oz = (float)output_z * 0.001;

	float2 uv = float2((depthWidth - id.x) / (float)depthWidth, (depthHeight - id.y) / (float)depthHeight);
	uv.y = 1.0 - uv.y;
	uv.x = 1.0 - uv.x;

	float output_uv = EncodeUV(uv);

	// Fill rendertexture
	Output_vertexTexture[id.xy] = float4(ox, oy, oz, output_uv);
}

[numthreads(64, 16, 1)]
void ColorGenerator(uint3 id : SV_DispatchThreadID)
{
	//int index = colorWidth * id.y + id.x;
	int index = colorWidth * (colorHeight - id.y) + (colorWidth - id.x);

	// Get results from color data buffer
	uint uintColor = Input_colorData[index];

	// Split uint to get the 4 bytes of color
	uint output_byte_b = (uintColor >> 0) & 0xff;
	uint output_byte_g = (uintColor >> 8) & 0xff;
	uint output_byte_r = (uintColor >> 16) & 0xff;
	uint output_byte_a = (uintColor >> 24) & 0xff;

	// Fill rendertexture
	Output_colorTexture[id.xy] = float4(float(output_byte_r) / 255.0, float(output_byte_g) / 255.0, float(output_byte_b) / 255.0, float(output_byte_a) / 255.0);
}
