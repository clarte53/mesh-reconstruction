#include "ProceduralRenderingHelpers.cginc"

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ClearVertexBuffer_1022_1_1
#pragma kernel ClearVertexBuffer_719_1_1
#pragma kernel ClearVertexBuffer_990_1_1
#pragma kernel ClearVertexBuffer_741_1_1
#pragma kernel ClearVertexBuffer_256_4_1
#pragma kernel ClearVertexBuffer_64_16_1

#pragma kernel FillVertexBuffer_512_2_1
#pragma kernel FillVertexBuffer_256_4_1
#pragma kernel FillVertexBuffer_21_47_1
#pragma kernel FillVertexBuffer_128_8_1
#pragma kernel FillVertexBuffer_64_16_1

// Fallback kernels
#pragma kernel ClearVertexBuffer_1_1_1
#pragma kernel FillVertexBuffer_1_1_1

Texture2D<float4> Input_vertexTexture;
matrix<float, 4, 4> pointsToClippingBox;
int width;
int clear_width;
int clear_height;

RWStructuredBuffer<Vert> vertexBuffer;

float maxEdgeLength;

void ClearBuffer(uint3 id)
{
	//The mesh read back code treats verts with a -1 for w position
	//as blank. Thats why Im using -1s.

	Vert vert;
	vert.position = float4(-1, -1, -1, -1);

	vert.uv = float2(0, 0);

	int index = id.x + id.y * clear_width + id.z * clear_width * clear_height;

	vertexBuffer[index] = vert;
}

void FillBuffer(uint3 id)
{
	float4 p1 = Input_vertexTexture[uint2(id.x + 0, id.y + 0)];
	float4 p2 = Input_vertexTexture[uint2(id.x + 0, id.y + 1)];
	float4 p3 = Input_vertexTexture[uint2(id.x + 1, id.y + 0)];
	float4 p4 = Input_vertexTexture[uint2(id.x + 1, id.y + 1)];
	
	bool discard_triangle = false;

	discard_triangle = ShouldPointBeDiscarded(pointsToClippingBox, p1.xyz);
	
	float epsilon = 0.00001f;

	if (length(p1.xyz) < epsilon || length(p2.xyz) < epsilon || length(p3.xyz) < epsilon || length(p4.xyz) < epsilon)
	{
		discard_triangle = true;
	}

	if(abs(p1.z - p2.z) > maxEdgeLength || abs(p1.z - p3.z) > maxEdgeLength || abs(p2.z - p4.z) > maxEdgeLength || abs(p3.z - p4.z) > maxEdgeLength)
	{
		discard_triangle = true;
	}

	float confidence;

	float4 p1p2 = p2 - p1;
	float4 p1p3 = p3 - p1;

	float3 n = normalize(cross(p1p2.xyz, p1p3.xyz));

	float3 v = -normalize(p1.xyz);

	float scal = dot(n, v);

	float angle = acos(scal);

	float max_confidence_threshold = 1.0;

	if (angle < max_confidence_threshold)
	{
		confidence = 1;
	}
	else
	{
		float max_angle = 1.5;
		float r = (angle - max_confidence_threshold) / (max_angle - max_confidence_threshold);

		if (r > 1)
		{
			r = 1;
		}

		confidence = 1 - r;
	}
	
	if (discard_triangle)
	{
		p4 = p3 = p2 = p1;
	}

	int index = id.x + id.y * width;

	vertexBuffer[6 * index + 0] = CreateVertex(p1, confidence);
	vertexBuffer[6 * index + 1] = CreateVertex(p4, confidence);
	vertexBuffer[6 * index + 2] = CreateVertex(p3, confidence);

	vertexBuffer[6 * index + 3] = CreateVertex(p1, confidence);
	vertexBuffer[6 * index + 4] = CreateVertex(p2, confidence);
	vertexBuffer[6 * index + 5] = CreateVertex(p4, confidence);
}


[numthreads(1022, 1, 1)]
void ClearVertexBuffer_1022_1_1(uint3 id : SV_DispatchThreadID)
{
	ClearBuffer(id);
}

[numthreads(719, 1, 1)]
void ClearVertexBuffer_719_1_1(uint3 id : SV_DispatchThreadID)
{
	ClearBuffer(id);
}

[numthreads(990, 1, 1)]
void ClearVertexBuffer_990_1_1(uint3 id : SV_DispatchThreadID)
{
	ClearBuffer(id);
}

[numthreads(741, 1, 1)]
void ClearVertexBuffer_741_1_1(uint3 id : SV_DispatchThreadID)
{
	ClearBuffer(id);
}

[numthreads(256, 4, 1)]
void ClearVertexBuffer_256_4_1(uint3 id : SV_DispatchThreadID) {
	ClearBuffer(id);
}

[numthreads(64, 16, 1)]
void ClearVertexBuffer_64_16_1(uint3 id : SV_DispatchThreadID) {
	ClearBuffer(id);
}


[numthreads(512, 2, 1)]
void FillVertexBuffer_512_2_1(uint3 id : SV_DispatchThreadID)
{
	FillBuffer(id);
}

[numthreads(256, 4, 1)]
void FillVertexBuffer_256_4_1(uint3 id : SV_DispatchThreadID)
{
	FillBuffer(id);
}

[numthreads(21, 47, 1)]
void FillVertexBuffer_21_47_1(uint3 id : SV_DispatchThreadID)
{
	FillBuffer(id);
}

[numthreads(128, 8, 1)]
void FillVertexBuffer_128_8_1(uint3 id : SV_DispatchThreadID)
{
	FillBuffer(id);
}

[numthreads(64, 16, 1)]
void FillVertexBuffer_64_16_1(uint3 id : SV_DispatchThreadID)
{
	FillBuffer(id);
}

// Fallback kernels
[numthreads(1, 1, 1)]
void ClearVertexBuffer_1_1_1(uint3 id : SV_DispatchThreadID)
{
	ClearBuffer(id);
}

[numthreads(1, 1, 1)]
void FillVertexBuffer_1_1_1(uint3 id : SV_DispatchThreadID)
{
	FillBuffer(id);
}