#include "ProceduralRenderingHelpers.cginc"

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ClearVertexBuffer_1024_1_1
#pragma kernel FillVertexBuffer_512_2_1

#pragma kernel ClearVertexBuffer_256_4_1
#pragma kernel FillVertexBuffer_256_4_1

#pragma kernel ClearVertexBuffer_64_16_1
#pragma kernel FillVertexBuffer_64_16_1

#pragma kernel ClearVertexBuffer_32_32_1
#pragma kernel FillVertexBuffer_32_32_1

// Fallback kernels
#pragma kernel ClearVertexBuffer_1_1_1
#pragma kernel FillVertexBuffer_1_1_1

Texture2D<float4> Input_vertexTexture;
matrix<float, 4, 4> pointsToClippingBox;
int width;
int clear_width;
int clear_height;

RWStructuredBuffer<Vert> vertexBuffer;

float size;
float3 dir_x, dir_y;

void ClearBuffer(uint3 id)
{
	//The mesh read back code treats verts with a -1 for w position
	//as blank. Thats why Im using -1s.

	Vert vert;
	vert.position = float4(-1, -1, -1, -1);

	vert.uv = float2(0, 0);
	
	int index = id.x + id.y * clear_width + id.z * clear_width * clear_height;
	
	vertexBuffer[index] = vert;
}

void FillBuffer(uint3 id)
{
	float4 p = Input_vertexTexture[uint2(id.x, id.y)];

	bool discard_p = ShouldPointBeDiscarded(pointsToClippingBox, p);

	if (discard_p)
	{
		return;
	}

	float4 p1 = p + size * float4(-dir_x + dir_y, 1);
	float4 p2 = p + size * float4( dir_x + dir_y, 1);
	float4 p3 = p + size * float4(-dir_x - dir_y, 1);
	float4 p4 = p + size * float4( dir_x - dir_y, 1);

	int index = id.x + id.y * width;

	vertexBuffer[6 * index + 0] = CreateVertex(p1, 1);
	vertexBuffer[6 * index + 1] = CreateVertex(p2, 1);
	vertexBuffer[6 * index + 2] = CreateVertex(p4, 1);

	vertexBuffer[6 * index + 3] = CreateVertex(p1, 1);
	vertexBuffer[6 * index + 4] = CreateVertex(p4, 1);
	vertexBuffer[6 * index + 5] = CreateVertex(p3, 1);
}

[numthreads(1024, 1, 1)]
void ClearVertexBuffer_1024_1_1(uint3 id : SV_DispatchThreadID)
{
	ClearBuffer(id);
}

[numthreads(512, 2, 1)]
void FillVertexBuffer_512_2_1(uint3 id : SV_DispatchThreadID)
{
	FillBuffer(id);
}

[numthreads(256, 4, 1)]
void ClearVertexBuffer_256_4_1(uint3 id : SV_DispatchThreadID) {
	ClearBuffer(id);
}

[numthreads(256, 4, 1)]
void FillVertexBuffer_256_4_1(uint3 id : SV_DispatchThreadID)
{
	FillBuffer(id);
}

[numthreads(64, 16, 1)]
void ClearVertexBuffer_64_16_1(uint3 id : SV_DispatchThreadID) {
	ClearBuffer(id);
}

[numthreads(64, 16, 1)]
void FillVertexBuffer_64_16_1(uint3 id : SV_DispatchThreadID)
{
	FillBuffer(id);
}

[numthreads(32, 32, 1)]
void ClearVertexBuffer_32_32_1(uint3 id : SV_DispatchThreadID) {
	ClearBuffer(id);
}

[numthreads(32, 32, 1)]
void FillVertexBuffer_32_32_1(uint3 id : SV_DispatchThreadID)
{
	FillBuffer(id);
}

// Fallback kernels
[numthreads(1, 1, 1)]
void ClearVertexBuffer_1_1_1(uint3 id : SV_DispatchThreadID)
{
	ClearBuffer(id);
}

[numthreads(1, 1, 1)]
void FillVertexBuffer_1_1_1(uint3 id : SV_DispatchThreadID)
{
	FillBuffer(id);
}

